{"version":3,"sources":["xr/vr_scene/FirstPersonViewControls.js","assets/3d_model/gallery_room.glb","pages/mission/VrScene.component.tsx","xr/vr_scene/index.js"],"names":["_changeEvent","type","_startEvent","_endEvent","_zee","Vector3","_euler","Euler","_q0","Quaternion","_q1","Math","sqrt","FirstPersonViewControls","object","domElement","undefined","console","warn","document","error","window","isSecureContext","rotation","reorder","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableFOVZoom","zoomMinFOV","zoomMaxFOV","enableRotate","rotateSpeed","mouseButtons","LEFT","MOUSE","ROTATE","MIDDLE","NONE","RIGHT","touches","ONE","TOUCH","TWO","target0","clone","position0","position","zoom0","zoom","lastQuaternionDevOr","enabledDeviceOrientation","deviceOrientation","screenOrientationDevOr","alphaOffsetDevOr","reset","scope","copy","updateProjectionMatrix","dispatchEvent","update","state","STATE","updateDeviceOrientation","dispose","removeEventListener","onPointerDown","onPointerCancel","onMouseWheel","ownerDocument","onPointerMove","onPointerUp","disconnectDeviceOrientation","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY_ROTATE","ZOOM_FOV","rotateStart","Vector2","rotateEnd","rotateDelta","fovZoomStart","fovZoomEnd","pointers","pointerPositions","rotateCameraFromMoveDelta","horRad","vertRad","rot","newX","x","newY","y","set","z","fovZoom","degreesDelta","isPerspectiveCamera","newFOV","min","max","fov","event","length","addEventListener","push","addPointer","pointerType","trackPointer","pageX","pageY","handleTouchStartRotate","dx","dy","distance","handleTouchStartFOVZoom","onTouchStart","mouseAction","button","log","clientX","clientY","handleMouseDownRotate","onMouseDown","getSecondPointerPosition","fov0to1","handleTouchMoveFOVZoom","subVectors","multiplyScalar","element","horizAngleDeltaRad","clientHeight","verticalAngleDeltaRad","handleTouchMoveRotate","onTouchMove","handleMouseMoveRotate","onMouseMove","removePointer","preventDefault","deltaY","handleMouseWheel","pointerId","i","splice","pointer","onDeviceOrientationChangeEvent","onScreenOrientationChangeEvent","orientation","connectDeviceOrientation","DeviceOrientationEvent","requestPermission","then","response","catch","device","alpha","MathUtils","degToRad","beta","gamma","orient","quaternion","setFromEuler","multiply","setFromAxisAngle","setObjectQuaternion","dot","passive","EventDispatcher","VrScene","useState","isVRSceneStated","setIsVRSceneStated","is3DModelLoaded","setIs3DModelLoaded","isPaintingsLoaded","setIsPaintingsLoaded","queries","useLocation","resources","map","url","queryKey","cacheTime","staleTime","queryFn","getImageRequest","data","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","results","useQueries","useEffect","every","query","isFetched","containerElement","paintingPaths","model3DPath","on3DModelLoad","onPaintingsLoad","scene","THREE","camera","innerWidth","innerHeight","renderer","antialias","setSize","outputEncoding","appendChild","controls","loadManager","textureLoader","paintingMaterials","paint","load","GLTFLoader","gltf","add","onLoad","name","canvasObj","getObjectByName","material","canvW","image","width","canvH","height","canvAR","scale","animate","requestAnimationFrame","render","startVRScene","ref","current","useRef","isLoading","isFetching"],"mappings":"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","file":"static/js/4.18d77ec1.chunk.js","sourcesContent":["import {\n    Euler,\n    EventDispatcher,\n    MathUtils,\n    MOUSE,\n    Quaternion,\n    TOUCH,\n    Vector2,\n    Vector3\n} from 'three';\n\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\n\nconst TOUCH_ZOOM_FOV = 100;\n\nconst _zee = new Vector3( 0, 0, 1 );\nconst _euler = new Euler();\nconst _q0 = new Quaternion();\nconst _q1 = new Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\nclass FirstPersonViewControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        // eslint-disable-next-line no-console\n        if ( domElement === undefined ) {console.warn( 'FirstPersonViewControls: The second parameter \"domElement\" is now mandatory.' );}\n        // eslint-disable-next-line no-console\n        if ( domElement === document ) {console.error( 'FirstPersonViewControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );}\n        if ( window.isSecureContext === false ) {\n            // eslint-disable-next-line no-console\n            console.error( 'FirstPersonViewControls: DeviceOrientationEvent is only available in secure contexts (https)' );\n        }\n\n        this.object = object;\n        this.object.rotation.reorder( 'YXZ' );\n\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // Custom field of view zoom\n        this.enableFOVZoom = true;\n        this.zoomMinFOV = 5;\n        this.zoomMaxFOV = 75;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.NONE, RIGHT: MOUSE.NONE };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.NONE, TWO: TOUCH.NONE };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n\n        // MyDeviceOrientationControls\n        const lastQuaternionDevOr = new Quaternion();\n\n        this.enabledDeviceOrientation = true;\n\n        this.deviceOrientation = {};\n        this.screenOrientationDevOr = 0;\n\n        this.alphaOffsetDevOr = 0; // radians\n\n        //\n        // public methods\n        //\n\n        this.reset = function () {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        this.update = function () {\n\n\t\t\tif (scope.enabledDeviceOrientation === true) {\n\n\t\t\t\tscope.updateDeviceOrientation();\n\n            }\n\n        };\n\n        this.dispose = function () {\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerCancel );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n            scope.disconnectDeviceOrientation();\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            TOUCH_ROTATE: 3,\n            TOUCH_DOLLY_ROTATE: 6,\n\n            ZOOM_FOV: 7\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const fovZoomStart = new Vector2();\n        const fovZoomEnd = new Vector2();\n\n        const pointers = [];\n        const pointerPositions = {};\n\n\n        function rotateCameraFromMoveDelta(horRad, vertRad) {\n            const rot = new Euler().copy(scope.object.rotation);\n\t\t\tconst newX = rot.x + vertRad;\n\t\t\tconst newY = rot.y + horRad;\n            scope.object.rotation.set(newX, newY, rot.z, 'YZX');\n\t\t}\n\n        function fovZoom( degreesDelta ) {\n\n            if ( scope.object.isPerspectiveCamera ) {\n\n                const newFOV = Math.min(Math.max(scope.object.fov + degreesDelta, scope.zoomMinFOV), scope.zoomMaxFOV);\n                scope.object.fov = newFOV;\n                scope.object.updateProjectionMatrix();\n\n            } else {\n                // eslint-disable-next-line no-console\n                console.error('Only perspective camera is supported');\n            }\n\n        }\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n            const horizAngleDeltaRad = rotateDelta.x / element.clientHeight;\n            const verticalAngleDeltaRad = rotateDelta.y / element.clientHeight;\n\n            rotateStart.copy( rotateEnd );\n\n            rotateCameraFromMoveDelta(horizAngleDeltaRad, verticalAngleDeltaRad);\n        }\n\n        function handleMouseUp( /*event*/ ) {\n\n            // no-op\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            if ( event.deltaY < 0 ) {\n\n                if (scope.enableFOVZoom) {\n                    fovZoom(-5);\n                }\n\n            } else if ( event.deltaY > 0 ) {\n\n                if (scope.enableFOVZoom) {\n                    fovZoom(5);\n                }\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n                const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartFOVZoom() {\n\n            if ( scope.enableFOVZoom ) {\n\n                const dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;\n                const dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;\n\n                const distance = Math.sqrt( dx * dx + dy * dy );\n\n                fovZoomStart.set( 0, distance );\n\n            }\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n            const horizAngleDeltaRad = rotateDelta.x / element.clientHeight;\n            const verticalAngleDeltaRad = rotateDelta.y / element.clientHeight;\n\n            rotateStart.copy( rotateEnd );\n\n            rotateCameraFromMoveDelta(horizAngleDeltaRad, verticalAngleDeltaRad);\n        }\n\n        function handleTouchMoveFOVZoom ( event ) {\n\n            if ( scope.enableFOVZoom )\n            {\n\n                const position = getSecondPointerPosition( event );\n\n                const dx = event.pageX - position.x;\n                const dy = event.pageY - position.y;\n\n                const distance = Math.sqrt( dx * dx + dy * dy );\n\n                fovZoomEnd.set( 0, distance );\n\n                const fov0to1 = Math.max(0.1, (scope.object.fov - scope.zoomMinFOV) / (scope.zoomMaxFOV - scope.zoomMinFOV));\n\n                if (fovZoomEnd.y > fovZoomStart.y) {\n                    fovZoom(-fov0to1);\n                } else {\n                    fovZoom(fov0to1);\n                }\n\n                fovZoomStart.copy( fovZoomEnd );\n\n            }\n\n        }\n\n        function handleTouchEnd( /*event*/ ) {\n\n            // no-op\n\n        }\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) {return;}\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) {return;}\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            if ( scope.enabled === false ) {return;}\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchEnd();\n\n            } else {\n\n                onMouseUp( event );\n\n            }\n\n            removePointer( event );\n\n            //\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n        }\n\n        function onPointerCancel( event ) {\n\n            removePointer( event );\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    // eslint-disable-next-line no-console\n                    console.log('select middle mouse action');\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.ROTATE:\n\n                    if ( scope.enableRotate === false ) {return;}\n\n                    handleMouseDownRotate( event );\n\n                    state = STATE.ROTATE;\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            if ( scope.enabled === false ) {return;}\n\n            // eslint-disable-next-line default-case\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) {return;}\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseUp( event ) {\n\n            handleMouseUp( event );\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || (scope.enableFOVZoom === false) || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) {return;}\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) {return;}\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH_ZOOM_FOV:\n\n                            if ( scope.enableFOVZoom === false ) {return;}\n\n                            handleTouchStartFOVZoom();\n\n                            state = STATE.ZOOM_FOV;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.ZOOM_FOV:\n\n                    if ( scope.enableFOVZoom === false ) {return;}\n\n                    handleTouchMoveFOVZoom( event );\n\n                    break;\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) {return;}\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onTouchEnd( event ) {\n\n            handleTouchEnd( event );\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[ event.pointerId ];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[ i ].pointerId === event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[ event.pointerId ];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[ event.pointerId ] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[ 0 ].pointerId ) ? pointers[ 1 ] : pointers[ 0 ];\n\n            return pointerPositions[ pointer.pointerId ];\n\n        }\n\n        //\n\n        const onDeviceOrientationChangeEvent = function ( event ) {\n\n            scope.deviceOrientation = event;\n\n        };\n\n        const onScreenOrientationChangeEvent = function () {\n\n            scope.screenOrientationDevOr = window.orientation || 0;\n\n        };\n\n        const setObjectQuaternion = function ( quaternion, alpha, beta, gamma, orient ) {\n\n            _euler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n            quaternion.setFromEuler( _euler ); // orient the device\n\n            quaternion.multiply( _q1 ); // camera looks out the back of the device, not the top\n\n            quaternion.multiply( _q0.setFromAxisAngle( _zee, - orient ) ); // adjust for screen orientation\n\n        };\n\n        this.connectDeviceOrientation = function () {\n\n            onScreenOrientationChangeEvent(); // run once on load\n\n            // iOS 13+\n\n            if ( window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function' ) {\n\n                window.DeviceOrientationEvent.requestPermission().then( function ( response ) {\n\n                    if ( response === 'granted' ) {\n\n                        window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent );\n                        window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent );\n\n                    }\n\n                } ).catch( function ( error ) {\n\n                    // eslint-disable-next-line no-console\n                    console.error( 'THREE.MyDeviceOrientationControls: Unable to use DeviceOrientation API:', error );\n\n                } );\n\n            } else {\n\n                window.addEventListener( 'orientationchange', onScreenOrientationChangeEvent );\n                window.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent );\n\n            }\n\n            scope.enabledDeviceOrientation = true;\n\n        };\n\n        this.disconnectDeviceOrientation = function () {\n\n            window.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent );\n            window.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent );\n\n            scope.enabledDeviceOrientation = false;\n\n        };\n\n        this.updateDeviceOrientation = function () {\n\n            if ( scope.enabledDeviceOrientation === false ) {return;}\n\n            const device = scope.deviceOrientation;\n\n            if ( device ) {\n\n                const alpha = device.alpha ? MathUtils.degToRad( device.alpha ) + scope.alphaOffsetDevOr : 0; // Z\n\n                const beta = (device.beta ? MathUtils.degToRad( device.beta ) : 0); // X'\n\n                const gamma = (device.gamma ? MathUtils.degToRad( device.gamma ) : 0); // Y''\n\n                const orient = scope.screenOrientationDevOr ? MathUtils.degToRad( scope.screenOrientationDevOr ) : 0; // O\n\n                setObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\n                if ( 8 * ( 1 - lastQuaternionDevOr.dot( scope.object.quaternion ) ) > EPS ) {\n\n                    lastQuaternionDevOr.copy( scope.object.quaternion );\n                    scope.dispatchEvent( _changeEvent );\n\n                }\n\n            }\n\n        };\n\n        //\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerCancel );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.connectDeviceOrientation();\n\n    }\n\n}\n\nexport { FirstPersonViewControls, TOUCH_ZOOM_FOV };\n","export default __webpack_public_path__ + \"static/media/gallery_room.b9330f65.glb\";","import React, {FC, useEffect, useRef, useState} from 'react';\nimport {UseQueryOptions} from 'react-query/types/react/types';\nimport {useLocation} from 'react-router-dom';\nimport {useQueries} from 'react-query';\nimport {startVRScene} from '../../xr/vr_scene';\nimport {getImageRequest} from '../../api/Resources.api';\nimport {Spinner} from '../../common/Spinner.component';\n// @ts-ignore\nimport model3DPath from '../../assets/3d_model/gallery_room.glb';\n\nconst VrScene: FC = () => {\n  const [isVRSceneStated, setIsVRSceneStated] = useState(false);\n  const [is3DModelLoaded, setIs3DModelLoaded] = useState(false);\n  const [isPaintingsLoaded, setIsPaintingsLoaded] = useState(false);\n  const location = useLocation<{readonly resources: Array<string>}>();\n  const queries: Array<UseQueryOptions> = location.state.resources.map(url => {\n    return {\n      queryKey: ['resourceUrl', url],\n      cacheTime : 0,\n      staleTime: Infinity,\n      queryFn: () => getImageRequest(url).then((data: any) => {\n        return new Promise(resolve => {\n          const reader = new FileReader();\n          reader.onload = () => {\n            if (reader.result && typeof reader.result === 'string') {\n              resolve(reader.result);\n            }\n          };\n          reader.readAsDataURL(data);\n        });\n      }),\n    };\n  });\n\n  const results = useQueries(queries);\n\n  useEffect(() => {\n    if (!isVRSceneStated && results.every(query => query.isFetched)) {\n      setIsVRSceneStated(true);\n      startVRScene(\n        ref.current,\n        results.map(query => query.data),\n        model3DPath,\n        () => setIs3DModelLoaded(true),\n        () => setIsPaintingsLoaded(true),\n      );\n    }\n  }, [isVRSceneStated, results]);\n\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  return (\n    <div ref={ref}>\n      <Spinner isLoading={results.every(query => query.isFetching) || !is3DModelLoaded || !isPaintingsLoaded}/>\n    </div>\n  );\n};\n\nexport default VrScene;\n","import * as THREE from 'three';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport {FirstPersonViewControls, TOUCH_ZOOM_FOV} from './FirstPersonViewControls';\n\nexport const startVRScene = (\n  containerElement,\n  paintingPaths,\n  model3DPath,\n  on3DModelLoad,\n  onPaintingsLoad,\n) => {\n  const scene = new THREE.Scene();\n\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 3000);\n  camera.position.y = 225;\n\n  const renderer = new THREE.WebGLRenderer({antialias: true});\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.outputEncoding = THREE.sRGBEncoding;\n  containerElement.appendChild(renderer.domElement);\n\n  const controls = new FirstPersonViewControls(camera, renderer.domElement);\n  controls.enableFOVZoom = true;\n  controls.mouseButtons.LEFT = THREE.MOUSE.ROTATE;\n  controls.mouseButtons.MIDDLE = THREE.MOUSE.NONE;\n  controls.mouseButtons.RIGHT = THREE.MOUSE.NONE;\n  controls.touches.ONE = THREE.TOUCH.NONE;\n  controls.touches.TWO = TOUCH_ZOOM_FOV;\n  controls.enabledDeviceOrientation = window.DeviceOrientationEvent && 'ontouchstart' in window;\n  controls.update();\n\n  const loadManager = new THREE.LoadingManager();\n  const textureLoader = new THREE.TextureLoader(loadManager);\n  const paintingMaterials = paintingPaths.map(paint => new THREE.MeshLambertMaterial(\n    {map: textureLoader.load(paint)}\n  ));\n\n  const gltfLoader = new GLTFLoader(loadManager);\n  gltfLoader.load(\n    model3DPath,\n    function (gltf) {\n      if (on3DModelLoad) {\n        on3DModelLoad();\n      }\n      scene.add(gltf.scene);\n    }\n  );\n\n\n  loadManager.onLoad = function () {\n    if (onPaintingsLoad) {\n      onPaintingsLoad();\n    }\n\n    for (let i = 0; i < 6; ++i) {\n      const name = 'canvas' + (i + 1);\n      const canvasObj = scene.getObjectByName(name, true);\n\n      canvasObj.material = paintingMaterials[i];\n\n      const canvW = canvasObj.material.map.image.width;\n      const canvH = canvasObj.material.map.image.height;\n      const canvAR = canvW / canvH;\n\n      if (canvW > canvH) {\n        canvasObj.scale.y /= canvAR;\n      } else {\n        canvasObj.scale.x *= canvAR;\n      }\n    }\n  };\n\n  const animate = function () {\n    requestAnimationFrame(animate);\n\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  animate();\n};\n"],"sourceRoot":""}